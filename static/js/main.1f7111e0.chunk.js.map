{"version":3,"sources":["model/Task.ts","elements/CreateTodoForm.tsx","elements/TaskRow.tsx","elements/TodoTable.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["prioritiesArray","DEFAULT_PRIORITY","CreatTaskForm","addTask","useState","title","setTitle","priority","setPriority","titleRef","useRef","create","trimmedTitle","trim","length","current","focus","className","htmlFor","type","id","name","value","onChange","event","target","onKeyDown","key","ref","data-testid","map","onClick","TaskRow","task","even","changeCompleted","deleteTask","checked","complete","PRIORITY_ORDER","TaskTable","tasks","filter","setFilter","titleSort","setTitleSort","prioritySort","setPrioritySort","filteredTasks","sortedAndFilteredTasks","sort","a","b","localeCompare","indexOf","numberOfCompletedTasks","sortArrow","direction","scope","colSpan","index","App","setTasks","newTask","produce","draftTasks","push","Date","now","isComplete","nextTasks","forEach","indexToDelete","findIndex","splice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iMAaaA,EAA8B,CAAC,OAAQ,SAAU,OCNxDC,EAAmB,SAEZC,EAAgB,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,QAAiC,EAClCC,mBAAS,IADyB,mBACrDC,EADqD,KAC9CC,EAD8C,OAE5BF,mBAAmBH,GAFS,mBAErDM,EAFqD,KAE3CC,EAF2C,KAGtDC,EAAWC,iBAAyB,MAE1C,SAASC,IACL,IAC6B,EADvBC,EAAeP,EAAMQ,OACvBD,EAAaE,OAAS,IACtBX,EAAQ,CAACE,MAAOO,EAAcL,SAAUA,IACxCD,EAAS,IACTE,EAAYP,GACZ,UAAAQ,EAASM,eAAT,SAAkBC,SAU1B,OACI,sBAAKC,UAAU,iCAAf,UACI,sBAAKA,UAAU,YAAf,UACI,uBAAOC,QAAQ,QAAQD,UAAU,0CAAjC,mBACA,qBAAKA,UAAU,OAAf,SACI,uBAAOE,KAAK,OAAOC,GAAG,QAAQC,KAAK,QAAQC,MAAOjB,EAAOkB,SAAU,SAAAC,GAAK,OAAIlB,EAASkB,EAAMC,OAAOH,QAAQI,UAX1H,SAA4BF,GACN,UAAdA,EAAMG,KACNhB,KASiJiB,IAAKnB,EAAUQ,UAAU,gHAI1K,sBAAKA,UAAU,uBAAf,UACI,uBAAOC,QAAQ,WAAWD,UAAU,0CAApC,sBACA,qBAAKA,UAAU,OAAf,SACI,wBAAQG,GAAG,WAAWC,KAAK,WAAWC,MAAOf,EAAUgB,SAAU,SAAAC,GAAK,OAAIhB,EAAYgB,EAAMC,OAAOH,QAAoBL,UAAU,uHAAuHY,cAAY,kBAApQ,SACK7B,EAAgB8B,KAAI,SAAAvB,GAAQ,OAAI,wBAAQU,UAAU,gBAA+BK,MAAOf,EAAxD,SAAmEA,GAA5BA,aAIpF,qBAAKU,UAAU,oBAAf,SACI,qBAAKA,UAAU,uCAAf,SACI,wBAAQE,KAAK,SAASY,QAAS,kBAAMpB,KAAUM,UAAU,uNAAzD,4B,OCvCPe,EAAU,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,gBAAiBC,EAA/B,EAA+BA,WAA/B,OACnB,qBAAInB,UAAWiB,EAAO,WAAa,aAAnC,UACI,oBAAIjB,UAAU,0FAAd,SACI,uBAAOI,KAAK,YAAYF,KAAK,WAAWkB,QAASJ,EAAKK,SAAUf,SAAU,SAACC,GAAD,OAAWW,EAAgBF,EAAKb,GAAII,EAAMC,OAAOY,UAAUpB,UAAU,oEAAoEY,cAAY,yBAEnO,oBAAIZ,UAAU,oDAAoDY,cAAY,iBAA9E,SAAgGI,EAAK5B,QACrG,oBAAIY,UAAU,oDAAoDY,cAAY,oBAA9E,SAAmGI,EAAK1B,WACxG,oBAAIU,UAAU,6DAAd,SAEI,wBAAQA,UAAU,mCAAmCc,QAAS,kBAAMK,EAAWH,EAAKb,KAAKS,cAAY,kBAArG,0BCTNU,EAAiB,CAAC,OAAQ,SAAU,OAE7BC,EAAY,SAAC,GAA0D,IAAzDC,EAAwD,EAAxDA,MAAON,EAAiD,EAAjDA,gBAAiBC,EAAgC,EAAhCA,WAAgC,EACnDhC,mBAAS,OAD0C,mBACxEsC,EADwE,KAChEC,EADgE,OAE7CvC,mBAAS,QAFoC,mBAExEwC,EAFwE,KAE7DC,EAF6D,OAGvCzC,mBAAS,QAH8B,mBAGxE0C,EAHwE,KAG1DC,EAH0D,KAK3EC,EAAgBP,EACL,aAAXC,EACAM,EAAgBP,EAAMC,QAAO,SAAAT,GAAI,OAAIA,EAAKK,YACxB,eAAXI,IACPM,EAAgBP,EAAMC,QAAO,SAAAT,GAAI,OAAKA,EAAKK,aAG/C,IAAIW,EAAyBD,EACX,cAAdJ,EACAK,EAAyB,YAAID,GAAeE,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAE9C,MAAMgD,cAAcD,EAAE/C,UAC/D,eAAduC,IACPK,EAAyB,YAAID,GAAeE,MAAK,SAACC,EAAGC,GAAJ,OAAWA,EAAE/C,MAAMgD,cAAcF,EAAE9C,WAEnE,cAAjByC,EACAG,EAAyB,YAAID,GAAeE,MAAK,SAACC,EAAGC,GAAJ,OAAWb,EAAee,QAAQF,EAAE7C,UAAYgC,EAAee,QAAQH,EAAE5C,aAClG,eAAjBuC,IACPG,EAAyB,YAAID,GAAeE,MAAK,SAACC,EAAGC,GAAJ,OAAWb,EAAee,QAAQH,EAAE5C,UAAYgC,EAAee,QAAQF,EAAE7C,cAG9H,IAAMgD,EAAyBd,EAAMC,QAAO,SAAAT,GAAI,OAAIA,EAAKK,YAAUxB,OA8BnE,SAAS0C,EAAUC,GACf,MAAkB,cAAdA,EACO,0CAEO,eAAdA,EACO,0CAEJ,KAGX,OACI,qBAAKxC,UAAU,gBAAf,SACI,qBAAKA,UAAU,uBAAf,SACI,qBAAKA,UAAU,4CAAf,SACI,qBAAKA,UAAU,8DAAf,SACI,wBAAOA,UAAU,sCAAjB,UACI,uBAAOA,UAAU,aAAjB,SACA,+BACI,oBAAIyC,MAAM,MAAMzC,UAAU,yFAA1B,uBAGA,oBAAIyC,MAAM,MAAMzC,UAAU,gGAA1B,SACI,yBAAQA,UAAU,6DAA6Dc,QAlD/G,WAEI,OADAgB,EAAgB,QACRH,GACJ,IAAK,OACDC,EAAa,aACb,MACJ,IAAK,YACDA,EAAa,cACb,MACJ,QACIA,EAAa,UAwCqHhB,cAAY,0BAA1H,mBAA2J2B,EAAUZ,QAEzK,oBAAIc,MAAM,MAAMzC,UAAU,4GAA1B,SACI,yBAAQA,UAAU,4EAA4Ec,QAvC9H,WAEI,OADAc,EAAa,QACLC,GACJ,IAAK,OACDC,EAAgB,cAChB,MACJ,IAAK,aACDA,EAAgB,aAChB,MACJ,QACIA,EAAgB,UA6BoIlB,cAAY,6BAA5I,sBAAmL2B,EAAUV,QAEjM,oBAAIY,MAAM,MAAMzC,UAAU,oBAA1B,SACI,sBAAMA,UAAU,UAAhB,2BAKR,kCACCgC,EAAuBnC,QAAU,EAAI,6BAClC,oBAAI6C,QAAS,EAAGD,MAAM,MAAtB,SACI,qBAAKzC,UAAU,qDAAf,qCAEA,KACPgC,EAAuBnB,KAAI,SAACG,EAAM2B,GAAP,OAAiB,cAAC,EAAD,CAAuB3B,KAAMA,EAAMC,KAAM0B,EAAQ,IAAM,EAAGzB,gBAAiBA,EAAiBC,WAAYA,GAA1FH,EAAKb,UAEhE,uBAAOH,UAAU,WAAjB,SACA,6BACI,oBAAI0C,QAAS,EAAGD,MAAM,MAAtB,SACI,sBAAKzC,UAAU,gBAAf,UACI,qBAAKA,UAAU,0FAAf,SACI,yBAAQI,KAAK,SAASC,MAAOoB,EAAQnB,SAAU,SAAAC,GAAK,OAAImB,EAAUnB,EAAMC,OAAOH,QAAQL,UAAU,0HAA0HY,cAAY,2BAAvO,UACI,yCACA,8CACA,qDAGR,sBAAKZ,UAAU,yFAAf,uBACesC,EADf,WAC+Cd,EAAM3B,+BChE9E+C,MAhDf,WAAgB,IAAD,EACezD,mBAAiB,IADhC,mBACJqC,EADI,KACGqB,EADH,KAkCX,OACI,qBAAK7C,UAAU,WAAf,SACI,sBAAKA,UAAU,wDAAf,UACI,sBAAKA,UAAU,cAAf,UACI,mBAAGA,UAAU,2EAAb,sBACA,mBAAGA,UAAU,8CAAb,qEAEJ,cAAC,EAAD,CAAed,QAtC3B,SAAiB4D,GACbD,EAASE,aAAQ,SAAAC,GACbA,EAAWC,KAAX,2BACOH,GADP,IAEI3C,GAAI+C,KAAKC,MACT9B,UAAU,YAkCV,cAAC,EAAD,CAAWG,MAAOA,EAAON,gBA7BrC,SAAyBf,EAAYiD,GACjC,IAAMC,EAAYN,YAAQvB,GAAO,SAAAwB,GAC7BA,EAAWM,SAAQ,SAAAtC,GACXA,EAAKb,KAAOA,IACZa,EAAKK,SAAW+B,SAI5BP,EAASQ,IAqB0DlC,WAlBvE,SAAoBhB,GAChB,IAAMkD,EAAYN,YAAQvB,GAAO,SAAAwB,GAC7B,IAAMO,EAAgBP,EAAWQ,WAAU,SAAAxC,GAAI,OAAIA,EAAKb,KAAOA,KAC3DoD,GAAiB,GACjBP,EAAWS,OAAOF,EAAe,MAGzCV,EAASQ,YCxBFK,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1f7111e0.chunk.js","sourcesContent":["export interface Task {\r\n    id: number\r\n    title: string,\r\n    complete: boolean\r\n    priority: Priority\r\n}\r\n\r\nexport interface NewTask {\r\n    title: string,\r\n    priority: Priority\r\n}\r\n\r\nexport type Priority = 'High' | 'Medium' | 'Low'\r\nexport const prioritiesArray: Priority[] = ['High', 'Medium', 'Low']\r\n","import React, {useRef, useState} from 'react'\r\nimport {NewTask, prioritiesArray, Priority} from \"../model/Task\";\r\n\r\ninterface CreatTaskFormProps {\r\n    addTask: (newTask: NewTask) => void\r\n}\r\n\r\nconst DEFAULT_PRIORITY = 'Medium'\r\n\r\nexport const CreatTaskForm = ({addTask}: CreatTaskFormProps) => {\r\n    const [title, setTitle] = useState('')\r\n    const [priority, setPriority] = useState<Priority>(DEFAULT_PRIORITY)\r\n    const titleRef = useRef<HTMLInputElement>(null)\r\n\r\n    function create() {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle.length > 0) {\r\n            addTask({title: trimmedTitle, priority: priority})\r\n            setTitle('')\r\n            setPriority(DEFAULT_PRIORITY)\r\n            titleRef.current?.focus()\r\n        }\r\n    }\r\n\r\n    function handleTitleKeyDown(event: React.KeyboardEvent<HTMLInputElement>) {\r\n        if (event.key === 'Enter') {\r\n            create()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"mt-6 flex flex-col md:flex-row\">\r\n            <div className=\"flex-grow\">\r\n                <label htmlFor=\"title\" className=\"block text-sm font-medium text-gray-700\">Title</label>\r\n                <div className=\"mt-1\">\r\n                    <input type=\"text\" id=\"title\" name=\"title\" value={title} onChange={event => setTitle(event.target.value)} onKeyDown={handleTitleKeyDown} ref={titleRef} className=\"shadow-sm focus:ring-blue-500 focus:border-blue-500 block w-full sm:text-sm border-gray-300 rounded-md\"/>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"md:mx-2 my-3 md:my-0\">\r\n                <label htmlFor=\"priority\" className=\"block text-sm font-medium text-gray-700\">Priority</label>\r\n                <div className=\"mt-1\">\r\n                    <select id=\"priority\" name=\"priority\" value={priority} onChange={event => setPriority(event.target.value as Priority)} className=\"shadow-sm focus:ring-blue-500 focus:border-blue-500 block w-full sm:text-sm border-gray-300 rounded-md text-gray-600\" data-testid=\"select-priority\">\r\n                        {prioritiesArray.map(priority => <option className=\"text-gray-600\" key={priority} value={priority}>{priority}</option>)}\r\n                    </select>\r\n                </div>\r\n            </div>\r\n            <div className=\"w-20 md:relative \">\r\n                <div className=\"md:absolute md:inset-x-0 md:bottom-0\">\r\n                    <button type=\"button\" onClick={() => create()} className=\"min-w-full text-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\">\r\n                        Create\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}","import {Task} from \"../model/Task\";\r\nimport React from \"react\";\r\n\r\ninterface TaskRowProps {\r\n    task: Task,\r\n    even: boolean,\r\n    changeCompleted: (id: number, isComplete: boolean) => void,\r\n    deleteTask: (id: number) => void\r\n}\r\n\r\nexport const TaskRow = ({task, even, changeCompleted, deleteTask}: TaskRowProps) =>\r\n    <tr className={even ? \"bg-white\" : \"bg-gray-50\"}>\r\n        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-400 grid justify-items-center\">\r\n            <input name=\"completed\" type=\"checkbox\" checked={task.complete} onChange={(event) => changeCompleted(task.id, event.target.checked)} className=\"focus:ring-blue-600 h-4 w-4 text-blue-500 border-gray-300 rounded\" data-testid=\"task-row-completed\"/>\r\n        </td>\r\n        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\" data-testid=\"task-row-title\">{task.title}</td>\r\n        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\" data-testid=\"task-row-priority\">{task.priority}</td>\r\n        <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\r\n            {/*<button className=\"text-blue-600 hover:text-blue-500 mx-3\">Edit</button> didn't get to adding edit functionality*/}\r\n            <button className=\"text-blue-600 hover:text-red-500\" onClick={() => deleteTask(task.id)} data-testid=\"task-row-delete\">Delete</button>\r\n        </td>\r\n    </tr>\r\n","import React, {useState} from 'react'\r\nimport {Task} from '../model/Task';\r\nimport {TaskRow} from \"./TaskRow\";\r\n\r\ninterface TaskTableProps {\r\n    tasks: Task[],\r\n    changeCompleted: (id: number, isComplete: boolean) => void\r\n    deleteTask: (id: number) => void\r\n}\r\n\r\nconst PRIORITY_ORDER = ['High', 'Medium', 'Low']\r\n\r\nexport const TaskTable = ({tasks, changeCompleted, deleteTask}: TaskTableProps) => {\r\n    const [filter, setFilter] = useState('All')\r\n    const [titleSort, setTitleSort] = useState('None')\r\n    const [prioritySort, setPrioritySort] = useState('None')\r\n\r\n    let filteredTasks = tasks\r\n    if (filter === 'Complete') {\r\n        filteredTasks = tasks.filter(task => task.complete)\r\n    } else if (filter === 'Incomplete') {\r\n        filteredTasks = tasks.filter(task => !task.complete)\r\n    }\r\n\r\n    let sortedAndFilteredTasks = filteredTasks;\r\n    if (titleSort === 'Ascending') {\r\n        sortedAndFilteredTasks = [...filteredTasks].sort((a, b) => (a.title.localeCompare(b.title)))\r\n    } else if (titleSort === 'Descending') {\r\n        sortedAndFilteredTasks = [...filteredTasks].sort((a, b) => (b.title.localeCompare(a.title)))\r\n    }\r\n    if (prioritySort === 'Ascending') {\r\n        sortedAndFilteredTasks = [...filteredTasks].sort((a, b) => (PRIORITY_ORDER.indexOf(b.priority) - PRIORITY_ORDER.indexOf(a.priority)))\r\n    } else if (prioritySort === 'Descending') {\r\n        sortedAndFilteredTasks = [...filteredTasks].sort((a, b) => (PRIORITY_ORDER.indexOf(a.priority) - PRIORITY_ORDER.indexOf(b.priority)))\r\n    }\r\n\r\n    const numberOfCompletedTasks = tasks.filter(task => task.complete).length\r\n\r\n    function handleClickTitleSort() {\r\n        setPrioritySort('None') // You can only sort by one field at a time\r\n        switch (titleSort) {\r\n            case 'None':\r\n                setTitleSort('Ascending')\r\n                break;\r\n            case 'Ascending':\r\n                setTitleSort('Descending')\r\n                break;\r\n            default:\r\n                setTitleSort('None')\r\n        }\r\n    }\r\n\r\n    function handleClickPrioritySort() {\r\n        setTitleSort('None') // You can only sort by one field at a time\r\n        switch (prioritySort) {\r\n            case 'None':\r\n                setPrioritySort('Descending')\r\n                break;\r\n            case 'Descending':\r\n                setPrioritySort('Ascending')\r\n                break;\r\n            default:\r\n                setPrioritySort('None')\r\n        }\r\n    }\r\n\r\n    function sortArrow(direction: string) {\r\n        if (direction === 'Ascending') {\r\n            return <span>&#5169;</span> //Unicode up arrow ᐱ\r\n        }\r\n        if (direction === 'Descending') {\r\n            return <span>&#5167;</span> //Unicode down arrow ᐯ\r\n        }\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex flex-col\">\r\n            <div className=\"my-2 overflow-x-auto\">\r\n                <div className=\"py-2 align-middle inline-block min-w-full\">\r\n                    <div className=\"shadow overflow-hidden border border-gray-200 sm:rounded-lg\">\r\n                        <table className=\"min-w-full divide-y divide-gray-200\">\r\n                            <thead className=\"bg-gray-50\">\r\n                            <tr>\r\n                                <th scope=\"col\" className=\"px-3 md:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                                    Completed\r\n                                </th>\r\n                                <th scope=\"col\" className=\"px-3 md:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-full\">\r\n                                    <button className=\"text-blue-500 text-xs font-medium uppercase tracking-wider\" onClick={handleClickTitleSort} data-testid=\"task-table-title-header\">Title {sortArrow(titleSort)}</button>\r\n                                </th>\r\n                                <th scope=\"col\" className=\"px-3 md:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap \">\r\n                                    <button className=\"text-blue-500 text-xs font-medium uppercase tracking-wider w-16 text-left\" onClick={handleClickPrioritySort} data-testid=\"task-table-priority-header\">Priority {sortArrow(prioritySort)}</button>\r\n                                </th>\r\n                                <th scope=\"col\" className=\"px-3 md:px-6 py-3\">\r\n                                    <span className=\"sr-only\">Delete</span>\r\n\r\n                                </th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {sortedAndFilteredTasks.length <= 0 ? <tr>\r\n                                <th colSpan={4} scope=\"col\">\r\n                                    <div className=\"w-full text-center text-gray-500 font-medium my-10\">No tasks to display</div>\r\n                                </th>\r\n                            </tr> : null}\r\n                            {sortedAndFilteredTasks.map((task, index) => <TaskRow key={task.id} task={task} even={index % 2 === 0} changeCompleted={changeCompleted} deleteTask={deleteTask}/>)}\r\n                            </tbody>\r\n                            <tfoot className=\"bg-white\">\r\n                            <tr>\r\n                                <th colSpan={4} scope=\"col\">\r\n                                    <div className=\"flex flex-row\">\r\n                                        <div className=\"inline px-6 py-3 text-left text-xs font-medium text-gray-500 tracking-wider text-center\">\r\n                                            <select name=\"filter\" value={filter} onChange={event => setFilter(event.target.value)} className=\"w-32 block focus:ring-blue-500 focus:border-blue-500 w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\" data-testid=\"filter-completion-status\">\r\n                                                <option>All</option>\r\n                                                <option>Complete</option>\r\n                                                <option>Incomplete</option>\r\n                                            </select>\r\n                                        </div>\r\n                                        <div className=\"pt-5 pr-5 text-sm font-medium text-gray-500 tracking-wider text-right inline flex-grow\">\r\n                                            Complete: {numberOfCompletedTasks} Total: {tasks.length}\r\n                                        </div>\r\n                                    </div>\r\n                                </th>\r\n                            </tr>\r\n                            </tfoot>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport produce from \"immer\"\r\nimport {CreatTaskForm} from \"./elements/CreateTodoForm\";\r\nimport {TaskTable} from \"./elements/TodoTable\";\r\nimport {NewTask, Task} from \"./model/Task\";\r\n\r\n\r\nfunction App() {\r\n    const [tasks, setTasks] = useState<Task[]>([]);\r\n\r\n    function addTask(newTask: NewTask) {\r\n        setTasks(produce(draftTasks => {\r\n            draftTasks.push({\r\n                ...newTask,\r\n                id: Date.now(),\r\n                complete: false\r\n            })\r\n        }))\r\n    }\r\n\r\n    function changeCompleted(id: number, isComplete: boolean) {\r\n        const nextTasks = produce(tasks, draftTasks => {\r\n            draftTasks.forEach(task => {\r\n                if (task.id === id) {\r\n                    task.complete = isComplete\r\n                }\r\n            })\r\n        })\r\n        setTasks(nextTasks)\r\n    }\r\n\r\n    function deleteTask(id: number) {\r\n        const nextTasks = produce(tasks, draftTasks => {\r\n            const indexToDelete = draftTasks.findIndex(task => task.id === id);\r\n            if (indexToDelete > -1) {\r\n                draftTasks.splice(indexToDelete, 1);\r\n            }\r\n        })\r\n        setTasks(nextTasks)\r\n    }\r\n\r\n    return (\r\n        <div className=\"bg-white\">\r\n            <div className=\"max-w-4xl mx-auto py-16 px-4 sm:py-24 sm:px-6 lg:px-8\">\r\n                <div className=\"text-center\">\r\n                    <p className=\"mt-1 font-extrabold text-gray-900 sm:tracking-tight text-5xl md:text-6xl\">Todo App</p>\r\n                    <p className=\"max-w-xl mt-5 mx-auto text-xl text-gray-500\">A demo project for James Leslie's application to PwC</p>\r\n                </div>\r\n                <CreatTaskForm addTask={addTask}/>\r\n                <TaskTable tasks={tasks} changeCompleted={changeCompleted} deleteTask={deleteTask}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}